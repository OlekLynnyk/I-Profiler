import { NextRequest, NextResponse } from 'next/server';
import { createServerClientForApi } from '@/lib/supabase/server';
import dayjs from 'dayjs';
import { env } from '@/env.server';

// –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º period_end (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) –∏–∑ payload Stripe invoice.payment_succeeded
function extractPeriodEndSeconds(payload: any): number | null {
  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ—Å—Ç–æ —É invoice
  const p1 = payload?.data?.object?.period_end;
  if (typeof p1 === 'number') return p1;

  // –ß–∞—Å—Ç–æ period_end –ª–µ–∂–∏—Ç –≤ –ø–µ—Ä–≤–æ–π –ª–∏–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
  const p2 = payload?.data?.object?.lines?.data?.[0]?.period?.end;
  if (typeof p2 === 'number') return p2;

  // –ò–Ω–æ–≥–¥–∞ –≤ –æ–±—ä–µ–∫—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏
  const p3 = payload?.data?.object?.subscription?.current_period_end;
  if (typeof p3 === 'number') return p3;

  return null;
}

// üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ–∫—Ä–µ—Ç –≤–µ—Ä–µ–Ω
export async function POST(req: NextRequest) {
  const secret = req.headers.get('authorization');
  if (secret !== `Bearer ${env.SYNC_SECRET_KEY}`) {
    return new Response('Unauthorized', { status: 401 });
  }

  const supabase = await createServerClientForApi();

  // üì• –ë–µ—Ä—ë–º –ª–∏–º–∏—Ç—ã (–≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
  const { data: limitsData, error: limitsError } = await supabase
    .from('user_limits')
    .select('user_id, plan, monthly_reset_at');

  if (limitsError || !limitsData) {
    return NextResponse.json({ error: 'Failed to fetch user limits' }, { status: 500 });
  }

  type MonthlyUpdate = { user_id: string; monthly_reset_at: string; used_monthly: number };
  const updates: MonthlyUpdate[] = [];

  for (const user of limitsData) {
    const { user_id, plan, monthly_reset_at } = user;

    // 1) Freemium: –ø–æ –ø–æ–ª–∏—Ç–∏–∫–µ ‚Äî –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
    if (plan === 'Freemium') continue;

    // 2) –ü–ª–∞—Ç–Ω—ã–µ: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–π –æ–ø–ª–∞—Ç–µ –ø–æ invoice.payment_succeeded
    const { data: log, error: logErr } = await supabase
      .from('billing_logs')
      .select('created_at, payload')
      .eq('user_id', user_id)
      .eq('event_type', 'invoice.payment_succeeded')
      .order('created_at', { ascending: false })
      .limit(1)
      .maybeSingle();

    if (logErr || !log) {
      // –ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–π –æ–ø–ª–∞—Ç—ã ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
      continue;
    }

    const periodEndSec = extractPeriodEndSeconds(log.payload);
    if (!periodEndSec) {
      // –ù–µ —Å–º–æ–≥–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø–µ—Ä–∏–æ–¥ ‚Äî –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö—É–µ–º—Å—è: –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
      continue;
    }

    const paidPeriodEndIso = dayjs.unix(periodEndSec).toISOString();

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ù–û–í–´–ô –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    const hasResetPoint = !!monthly_reset_at;
    const isNewPaidPeriod =
      !hasResetPoint || dayjs(paidPeriodEndIso).isAfter(dayjs(monthly_reset_at!));

    if (isNewPaidPeriod) {
      updates.push({
        user_id,
        used_monthly: 0,
        monthly_reset_at: paidPeriodEndIso,
      });
    }
  }

  // üíæ –ü–∏—à–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  for (const u of updates) {
    await supabase
      .from('user_limits')
      .update({
        used_monthly: u.used_monthly,
        monthly_reset_at: u.monthly_reset_at,
      })
      .eq('user_id', u.user_id);
  }

  return NextResponse.json({ success: true, updated: updates.length });
}
