'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { createPagesBrowserClient } from '@supabase/auth-helpers-nextjs';

export default function CallbackPage() {
  const router = useRouter();
  const supabase = createPagesBrowserClient();
  const [error, setError] = useState(false);

  useEffect(() => {
    const run = async () => {
      try {
        // üëá –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã–ª–∏—Å—å –Ω–∞ www.*, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ apex —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º query
        if (typeof window !== 'undefined' && window.location.hostname.startsWith('www.')) {
          const u = new URL(window.location.href);
          u.hostname = u.hostname.replace(/^www\./, '');
          window.location.replace(u.toString());
          return; // –¥–∞–ª—å—à–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏–º —É–∂–µ –Ω–∞ apex –¥–æ–º–µ–Ω–µ
        }

        try {
          await supabase.auth.exchangeCodeForSession(window.location.href);
        } catch (_) {}

        // ---- –ó–ê–ú–ï–ù–Å–ù–ù–´–ô –ë–õ–û–ö –ù–ê–ß–ê–õ–û ----
        // —á–∏—Ç–∞–µ–º query –æ–¥–∏–Ω —Ä–∞–∑
        const sp = new URLSearchParams(window.location.search);
        const email = sp.get('email') ?? '';
        const returnTo = sp.get('next') ?? '/';

        const {
          data: { session },
        } = await supabase.auth.getSession();

        if (!session) {
          // –Ω–µ—Ç —Å–µ—Å—Å–∏–∏ –≤ —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ ‚Üí —É–≤–æ–¥–∏–º –Ω–∞ –≤–≤–æ–¥ –∫–æ–¥–∞
          router.replace(
            `/auth/verify-code${email ? `?email=${encodeURIComponent(email)}` : ''}${
              returnTo ? `${email ? '&' : '?'}return_to=${encodeURIComponent(returnTo)}` : ''
            }`
          );
          return;
        }

        // –ª–æ–≥–∏–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω –≤ —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–µ ‚Üí –æ–ø–æ–≤–µ—â–∞–µ–º –¥—Ä—É–≥–∏–µ
        try {
          if ('BroadcastChannel' in window) {
            const bc = new BroadcastChannel('auth-events');
            bc.postMessage({ type: 'SIGNED_IN', returnTo });
            bc.close();
          } else {
            // —Ä–µ–∑–µ—Ä–≤ —á–µ—Ä–µ–∑ storage event
            localStorage.setItem('auth:last', String(Date.now()));
          }
        } catch {}
        // ---- –ó–ê–ú–ï–ù–Å–ù–ù–´–ô –ë–õ–û–ö –ö–û–ù–ï–¶ ----

        try {
          // –ß–∏—Ç–∞–µ–º —Ñ–ª–∞–≥ –∏–∑ localStorage, –Ω–æ –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ —à–ª—ë–º true,
          // —Ç–∞–∫ –∫–∞–∫ –≤ –º–æ–¥–∞–ª–∫–µ –∫–Ω–æ–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è
          const agreedFlag = localStorage.getItem('agreed_to_terms');
          const agreedToTerms = agreedFlag === 'true' ? 'true' : 'true';

          await fetch('/api/user/init', {
            method: 'POST',
            headers: {
              Authorization: `Bearer ${session!.access_token}`,
              'x-agreed-to-terms': agreedToTerms,
            },
          });
        } catch (err) {
          console.warn('Failed to call /api/user/init:', err);
        }

        // —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç
        router.replace(returnTo || '/');
      } catch (err) {
        console.error('Callback error:', err);
        setError(true);
      }
    };

    run();
  }, [router, supabase]);

  return (
    <p className="p-8 text-center">
      {error ? 'Something went wrong. Please try again.' : 'Redirecting...'}
    </p>
  );
}
